#pragma once
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ChipmunkJava__Vect */

#ifndef _Included_ChipmunkJava__Vect
#define _Included_ChipmunkJava__Vect
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ChipmunkJava__Vect
 * Method:    init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1Vect_init
  (JNIEnv *, jclass);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _new
 * Signature: (DD)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1new
  (JNIEnv *, jclass, jdouble, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _clone
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1clone
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    free
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1Vect_free
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    getX
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_getX
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    getY
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_getY
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    setX
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1Vect_setX
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    setY
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1Vect_setY
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _equals
 * Signature: (LChipmunkJava/_Vect;)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava__1Vect__1equals
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    length
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_length
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    lengthSq
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_lengthSq
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _add
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1add
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    cross
 * Signature: (LChipmunkJava/_Vect;)D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_cross
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    dot
 * Signature: (LChipmunkJava/_Vect;)D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_dot
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _div
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1div
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _mult
 * Signature: (D)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1mult
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _neg
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1neg
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _sub
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1sub
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _clamp
 * Signature: (D)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1clamp
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    toAngle
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_toAngle
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _normalize
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1normalize
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _rotate
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1rotate
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _unrotate
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1unrotate
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    dist
 * Signature: (LChipmunkJava/_Vect;)D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_dist
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    distSq
 * Signature: (LChipmunkJava/_Vect;)D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1Vect_distSq
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    near
 * Signature: (LChipmunkJava/_Vect;D)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava__1Vect_near
  (JNIEnv *, jobject, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _perp
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1perp
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _rperp
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1rperp
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _project
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1project
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _lerp
 * Signature: (LChipmunkJava/_Vect;D)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1lerp
  (JNIEnv *, jobject, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _lerpConst
 * Signature: (LChipmunkJava/_Vect;D)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1lerpConst
  (JNIEnv *, jobject, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _slerp
 * Signature: (LChipmunkJava/_Vect;D)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1slerp
  (JNIEnv *, jobject, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _slerpConst
 * Signature: (LChipmunkJava/_Vect;D)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1slerpConst
  (JNIEnv *, jobject, jobject, jdouble);

/*
 * Class:     ChipmunkJava__Vect
 * Method:    _forAngle
 * Signature: (D)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1Vect__1forAngle
  (JNIEnv *, jclass, jdouble);

#ifdef __cplusplus
}
#endif
#endif
