#pragma once
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ChipmunkJava_Space */

#ifndef _Included_ChipmunkJava_Space
#define _Included_ChipmunkJava_Space
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ChipmunkJava_Space
 * Method:    init
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Space_init
  (JNIEnv *, jclass);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _new
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Space__1new
  (JNIEnv *, jclass);

/*
 * Class:     ChipmunkJava_Space
 * Method:    free
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_free
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    addBody
 * Signature: (LChipmunkJava/Body;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_addBody
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    removeBody
 * Signature: (LChipmunkJava/Body;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_removeBody
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    addConstraint
 * Signature: (LChipmunkJava/Constraints/Constraint;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_addConstraint
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    removeConstraint
 * Signature: (LChipmunkJava/Constraints/Constraint;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_removeConstraint
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    addShape
 * Signature: (LChipmunkJava/Shapes/Shape;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_addShape
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    removeShape
 * Signature: (LChipmunkJava/Shapes/Shape;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_removeShape
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    containsBody
 * Signature: (LChipmunkJava/Body;)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava_Space_containsBody
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    containsConstraint
 * Signature: (LChipmunkJava/Constraints/Constraint;)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava_Space_containsConstraint
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    containsShape
 * Signature: (LChipmunkJava/Shapes/Shape;)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava_Space_containsShape
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    isLocked
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava_Space_isLocked
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    reindexShape
 * Signature: (LChipmunkJava/Shapes/Shape;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_reindexShape
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    reindexShapesForBody
 * Signature: (LChipmunkJava/Body;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_reindexShapesForBody
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    reindexStatic
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_reindexStatic
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _BBQuery
 * Signature: ([DLChipmunkJava/Collisions/ShapeFilter;)[J
 */
JNIEXPORT jlongArray JNICALL Java_ChipmunkJava_Space__1BBQuery
  (JNIEnv *, jobject, jdoubleArray, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _pointQuery
 * Signature: ([DDLChipmunkJava/Collisions/ShapeFilter;)[J
 */
JNIEXPORT jlongArray JNICALL Java_ChipmunkJava_Space__1pointQuery
  (JNIEnv *, jobject, jdoubleArray, jdouble, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _pointQueryNearest
 * Signature: ([DDLChipmunkJava/Collisions/ShapeFilter;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Space__1pointQueryNearest
  (JNIEnv *, jobject, jdoubleArray, jdouble, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _segmentQuery
 * Signature: ([D[DDLChipmunkJava/Collisions/ShapeFilter;)[J
 */
JNIEXPORT jlongArray JNICALL Java_ChipmunkJava_Space__1segmentQuery
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdouble, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _segmentQueryFirst
 * Signature: ([D[DDLChipmunkJava/Collisions/ShapeFilter;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Space__1segmentQueryFirst
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdouble, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _shapeQuery
 * Signature: (LChipmunkJava/Shapes/Shape;)[J
 */
JNIEXPORT jlongArray JNICALL Java_ChipmunkJava_Space__1shapeQuery
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    getCollisionBias
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Space_getCollisionBias
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _getCollisionPersistence
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Space__1getCollisionPersistence
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    getCollisionSlop
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Space_getCollisionSlop
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    getCurrentTimeStep
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Space_getCurrentTimeStep
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    getDamping
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Space_getDamping
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _getGravity
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Space__1getGravity
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    getIdleSpeedThreshold
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Space_getIdleSpeedThreshold
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    getIterations
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_ChipmunkJava_Space_getIterations
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    getSleepTimeThreshold
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Space_getSleepTimeThreshold
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _getStaticBody
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Space__1getStaticBody
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    getStepCount
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Space_getStepCount
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    setCollisionBias
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_setCollisionBias
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Space
 * Method:    setCollisionPersistence
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_setCollisionPersistence
  (JNIEnv *, jobject, jlong);

/*
 * Class:     ChipmunkJava_Space
 * Method:    setCollisionSlop
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_setCollisionSlop
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Space
 * Method:    setDamping
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_setDamping
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Space
 * Method:    _setGravity
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space__1setGravity
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Space
 * Method:    setIdleSpeedThreshold
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_setIdleSpeedThreshold
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Space
 * Method:    setIterations
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_setIterations
  (JNIEnv *, jobject, jint);

/*
 * Class:     ChipmunkJava_Space
 * Method:    setSleepTimeThreshold
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_setSleepTimeThreshold
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Space
 * Method:    useSpatialHash
 * Signature: (DI)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_useSpatialHash
  (JNIEnv *, jobject, jdouble, jint);

/*
 * Class:     ChipmunkJava_Space
 * Method:    debugDraw
 * Signature: (LChipmunkJava/Debug/SpaceDebugDrawOptions;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_debugDraw
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Space
 * Method:    step
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Space_step
  (JNIEnv *, jobject, jdouble);

#ifdef __cplusplus
}
#endif
#endif
