#pragma once
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ChipmunkJava_Body */

#ifndef _Included_ChipmunkJava_Body
#define _Included_ChipmunkJava_Body
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ChipmunkJava_Body
 * Method:    init
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Body_init
  (JNIEnv *, jclass);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _new
 * Signature: (DD)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Body__1new__DD
  (JNIEnv *, jclass, jdouble, jdouble);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _new
 * Signature: (LChipmunkJava/BodyType;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Body__1new__LChipmunkJava_BodyType_2
  (JNIEnv *, jclass, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _clone
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Body__1clone
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    free
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_free
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _disablePositionUpdateFunc
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1disablePositionUpdateFunc
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _enablePositionUpdateFunc
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1enablePositionUpdateFunc
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _disableVelocityUpdateFunc
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1disableVelocityUpdateFunc
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _enableVelocityUpdateFunc
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1enableVelocityUpdateFunc
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    getAngle
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Body_getAngle
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    getAngularVelocity
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Body_getAngularVelocity
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getBodyType
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_ChipmunkJava_Body__1getBodyType
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getCenterOfGravity
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1getCenterOfGravity
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getForce
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1getForce
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    getKineticEnergy
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Body_getKineticEnergy
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    getMass
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Body_getMass
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    getMoment
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Body_getMoment
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getPosition
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1getPosition
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getRotation
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1getRotation
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getSpace
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava_Body__1getSpace
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    getTorque
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava_Body_getTorque
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getVelocity
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1getVelocity
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getVelocityAtLocalPoint
 * Signature: ([D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1getVelocityAtLocalPoint
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _getVelocityAtWorldPoint
 * Signature: ([D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1getVelocityAtWorldPoint
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _localToWorld
 * Signature: ([D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1localToWorld
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _worldToLocal
 * Signature: ([D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_ChipmunkJava_Body__1worldToLocal
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    setAngle
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_setAngle
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Body
 * Method:    setAngularVelocity
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_setAngularVelocity
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Body
 * Method:    setBodyType
 * Signature: (LChipmunkJava/BodyType;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_setBodyType
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _setCenterOfGravity
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1setCenterOfGravity
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _setForce
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1setForce
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    setMass
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_setMass
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Body
 * Method:    setMoment
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_setMoment
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _setPosition
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1setPosition
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    setTorque
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_setTorque
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _setVelocity
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1setVelocity
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _applyForceAtLocalPoint
 * Signature: ([D[D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1applyForceAtLocalPoint
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _applyForceAtWorldPoint
 * Signature: ([D[D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1applyForceAtWorldPoint
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _applyImpulseAtLocalPoint
 * Signature: ([D[D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1applyImpulseAtLocalPoint
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    _applyImpulseAtWorldPoint
 * Signature: ([D[D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body__1applyImpulseAtWorldPoint
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray);

/*
 * Class:     ChipmunkJava_Body
 * Method:    isSleeping
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava_Body_isSleeping
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    activate
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_activate
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    activateStatic
 * Signature: (LChipmunkJava/Shapes/Shape;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_activateStatic
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    sleep
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_sleep
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava_Body
 * Method:    sleepWithGroup
 * Signature: (LChipmunkJava/Body;)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava_Body_sleepWithGroup
  (JNIEnv *, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
