#pragma once
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ChipmunkJava__BB */

#ifndef _Included_ChipmunkJava__BB
#define _Included_ChipmunkJava__BB
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ChipmunkJava__BB
 * Method:    init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1BB_init
  (JNIEnv *, jclass);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _new
 * Signature: (DDDD)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1new
  (JNIEnv *, jclass, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _newForExtents
 * Signature: (LChipmunkJava/_Vect;DD)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1newForExtents
  (JNIEnv *, jclass, jobject, jdouble, jdouble);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _newForCircle
 * Signature: (LChipmunkJava/_Vect;D)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1newForCircle
  (JNIEnv *, jclass, jobject, jdouble);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _clone
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1clone
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    free
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1BB_free
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    getL
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1BB_getL
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    getB
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1BB_getB
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    getR
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1BB_getR
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    getT
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1BB_getT
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    setL
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1BB_setL
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava__BB
 * Method:    setB
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1BB_setB
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava__BB
 * Method:    setR
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1BB_setR
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava__BB
 * Method:    setT
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_ChipmunkJava__1BB_setT
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     ChipmunkJava__BB
 * Method:    area
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1BB_area
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _center
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1center
  (JNIEnv *, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _clampVect
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1clampVect
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    containsBB
 * Signature: (LChipmunkJava/_BB;)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava__1BB_containsBB
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    containsPoint
 * Signature: (LChipmunkJava/_Vect;)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava__1BB_containsPoint
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _expand
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1expand
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    intersects
 * Signature: (LChipmunkJava/_BB;)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava__1BB_intersects
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    intersectsSegment
 * Signature: (LChipmunkJava/_Vect;LChipmunkJava/_Vect;)Z
 */
JNIEXPORT jboolean JNICALL Java_ChipmunkJava__1BB_intersectsSegment
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _merge
 * Signature: (LChipmunkJava/_BB;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1merge
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    mergedArea
 * Signature: (LChipmunkJava/_BB;)D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1BB_mergedArea
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _offset
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1offset
  (JNIEnv *, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    segmentQuery
 * Signature: (LChipmunkJava/_Vect;LChipmunkJava/_Vect;)D
 */
JNIEXPORT jdouble JNICALL Java_ChipmunkJava__1BB_segmentQuery
  (JNIEnv *, jobject, jobject, jobject);

/*
 * Class:     ChipmunkJava__BB
 * Method:    _wrapVect
 * Signature: (LChipmunkJava/_Vect;)J
 */
JNIEXPORT jlong JNICALL Java_ChipmunkJava__1BB__1wrapVect
  (JNIEnv *, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
